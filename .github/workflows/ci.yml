name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort types-PyYAML
        pip install -r requirements.txt
    
    - name: Run Black (code formatting)
      run: black --check --diff ev_forecast/ tests/
    
    - name: Run isort (import sorting)
      run: isort --check-only --diff ev_forecast/ tests/
    
    - name: Run Flake8 (linting)
      run: flake8 ev_forecast/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy (type checking)
      run: mypy ev_forecast/

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: lint
    
    strategy:
      matrix:
        python-version: ["3.10"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio httpx
        pip install -r requirements.txt
    
    - name: Create necessary directories
      run: |
        mkdir -p data/raw models logs
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=ev_forecast --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate synthetic data
      run: |
        python data/synthetic_generator.py --sites 3 --days 30
    
    - name: Run data pipeline
      run: |
        python -c "
        from ev_forecast.data_pipeline import DataPipeline
        pipeline = DataPipeline()
        df = pipeline.load_sessions()
        hourly = pipeline.aggregate_hourly(df)
        print(f'Processed {len(hourly)} hourly records')
        "
    
    - name: Test feature engineering
      run: |
        python -c "
        from ev_forecast.data_pipeline import DataPipeline
        from ev_forecast.features import FeatureEngineer
        pipeline = DataPipeline()
        engineer = FeatureEngineer()
        df = pipeline.load_sessions()
        hourly = pipeline.aggregate_hourly(df)
        features = engineer.create_feature_pipeline(hourly)
        print(f'Generated {features.shape[1]} features')
        "

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit (security linter)
      run: bandit -r ev_forecast/ -f json -o bandit-report.json || true
    
    - name: Run Safety (dependency vulnerability check)
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-docker:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: [test, integration-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ev-forecast:${{ github.sha }} .
        docker tag ev-forecast:${{ github.sha }} ev-forecast:latest
    
    - name: Test Docker image
      run: |
        # Create test data
        mkdir -p data/raw models
        echo "site_id,timestamp,sessions" > data/raw/synthetic_sessions.csv
        echo "1,2024-01-01T00:00:00,5.0" >> data/raw/synthetic_sessions.csv
        
        # Test that container starts
        docker run --rm -d --name test-container -p 8001:8000 \
          -v $(pwd)/data:/app/data \
          ev-forecast:latest &
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8001/health || exit 1
        
        # Clean up
        docker stop test-container || true

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could include:
        # - Pushing to container registry
        # - Deploying to staging Kubernetes cluster
        # - Running smoke tests

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This could include:
        # - Pushing to container registry with version tag
        # - Deploying to production Kubernetes cluster
        # - Running health checks
        # - Sending notifications

  notify:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [lint, test, integration-test, security, build-docker]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.integration-test.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        # Add notification logic (Slack, email, etc.)
    
    - name: Notify on failure
      if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.integration-test.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs."
        # Add notification logic for failures
